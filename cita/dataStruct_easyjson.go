// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package cita

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson69c461c7DecodeCita(in *jlexer.Lexer, out *Transactions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita(out *jwriter.Writer, in Transactions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transactions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transactions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transactions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transactions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita(l, v)
}
func easyjson69c461c7DecodeCita1(in *jlexer.Lexer, out *ResultVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "softwareVersion":
			out.SoftwareVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita1(out *jwriter.Writer, in ResultVersion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"softwareVersion\":"
		out.RawString(prefix[1:])
		out.String(string(in.SoftwareVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultVersion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultVersion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultVersion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultVersion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita1(l, v)
}
func easyjson69c461c7DecodeCita2(in *jlexer.Lexer, out *ResultTransactionReceipt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transactionHash":
			out.TransactionHash = string(in.String())
		case "TransactionIndex":
			out.TransactionIndex = string(in.String())
		case "blockHash":
			out.BlockHash = string(in.String())
		case "blockNumber":
			out.BlockNumber = string(in.String())
		case "cumulativeQuotaUsed":
			out.CumulativeQuotaUsed = string(in.String())
		case "quotaUsed":
			out.QuotaUsed = string(in.String())
		case "constractAddress":
			out.ConstractAddress = string(in.String())
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				in.Delim('[')
				if out.Logs == nil {
					if !in.IsDelim(']') {
						out.Logs = make([]ResultLogs, 0, 0)
					} else {
						out.Logs = []ResultLogs{}
					}
				} else {
					out.Logs = (out.Logs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ResultLogs
					(v1).UnmarshalEasyJSON(in)
					out.Logs = append(out.Logs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "root":
			out.Root = string(in.String())
		case "logsBloom":
			out.LogsBloom = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita2(out *jwriter.Writer, in ResultTransactionReceipt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transactionHash\":"
		out.RawString(prefix[1:])
		out.String(string(in.TransactionHash))
	}
	{
		const prefix string = ",\"TransactionIndex\":"
		out.RawString(prefix)
		out.String(string(in.TransactionIndex))
	}
	{
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix)
		out.String(string(in.BlockHash))
	}
	{
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		out.String(string(in.BlockNumber))
	}
	{
		const prefix string = ",\"cumulativeQuotaUsed\":"
		out.RawString(prefix)
		out.String(string(in.CumulativeQuotaUsed))
	}
	{
		const prefix string = ",\"quotaUsed\":"
		out.RawString(prefix)
		out.String(string(in.QuotaUsed))
	}
	{
		const prefix string = ",\"constractAddress\":"
		out.RawString(prefix)
		out.String(string(in.ConstractAddress))
	}
	{
		const prefix string = ",\"logs\":"
		out.RawString(prefix)
		if in.Logs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Logs {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"root\":"
		out.RawString(prefix)
		out.String(string(in.Root))
	}
	{
		const prefix string = ",\"logsBloom\":"
		out.RawString(prefix)
		out.String(string(in.LogsBloom))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultTransactionReceipt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultTransactionReceipt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultTransactionReceipt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultTransactionReceipt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita2(l, v)
}
func easyjson69c461c7DecodeCita3(in *jlexer.Lexer, out *ResultTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "from":
			out.From = string(in.String())
		case "blockNumber":
			out.BlockNumber = string(in.String())
		case "blockHash":
			out.BlockHash = string(in.String())
		case "Index":
			out.Index = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita3(out *jwriter.Writer, in ResultTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		out.String(string(in.BlockNumber))
	}
	{
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix)
		out.String(string(in.BlockHash))
	}
	{
		const prefix string = ",\"Index\":"
		out.RawString(prefix)
		out.String(string(in.Index))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita3(l, v)
}
func easyjson69c461c7DecodeCita4(in *jlexer.Lexer, out *ResultRawTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita4(out *jwriter.Writer, in ResultRawTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultRawTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultRawTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultRawTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultRawTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita4(l, v)
}
func easyjson69c461c7DecodeCita5(in *jlexer.Lexer, out *ResultPeerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int32(in.Int32())
		case "peers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Peers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.Peers)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita5(out *jwriter.Writer, in ResultPeerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Amount))
	}
	{
		const prefix string = ",\"peers\":"
		out.RawString(prefix)
		if in.Peers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Peers {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultPeerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultPeerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultPeerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultPeerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita5(l, v)
}
func easyjson69c461c7DecodeCita6(in *jlexer.Lexer, out *ResultMetaData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chainId":
			out.ChainId = int16(in.Int16())
		case "chainIdV1":
			out.ChainIdV1 = string(in.String())
		case "chainName":
			out.ChainName = string(in.String())
		case "operator":
			out.Operator = string(in.String())
		case "genesisTimestamp":
			out.GenesisTimestamp = time.Duration(in.Int64())
		case "validators":
			if in.IsNull() {
				in.Skip()
				out.Validators = nil
			} else {
				in.Delim('[')
				if out.Validators == nil {
					if !in.IsDelim(']') {
						out.Validators = make([]string, 0, 4)
					} else {
						out.Validators = []string{}
					}
				} else {
					out.Validators = (out.Validators)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Validators = append(out.Validators, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blockInterval":
			out.BlockInterval = time.Duration(in.Int64())
		case "tokenName":
			out.TokenName = string(in.String())
		case "tokenAvatar":
			out.TokenAvatar = string(in.String())
		case "version":
			out.Version = int32(in.Int32())
		case "economicalModel":
			out.EconomicalModel = int16(in.Int16())
		case "website":
			out.Website = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita6(out *jwriter.Writer, in ResultMetaData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chainId\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.ChainId))
	}
	{
		const prefix string = ",\"chainIdV1\":"
		out.RawString(prefix)
		out.String(string(in.ChainIdV1))
	}
	{
		const prefix string = ",\"chainName\":"
		out.RawString(prefix)
		out.String(string(in.ChainName))
	}
	{
		const prefix string = ",\"operator\":"
		out.RawString(prefix)
		out.String(string(in.Operator))
	}
	{
		const prefix string = ",\"genesisTimestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.GenesisTimestamp))
	}
	{
		const prefix string = ",\"validators\":"
		out.RawString(prefix)
		if in.Validators == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Validators {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"blockInterval\":"
		out.RawString(prefix)
		out.Int64(int64(in.BlockInterval))
	}
	{
		const prefix string = ",\"tokenName\":"
		out.RawString(prefix)
		out.String(string(in.TokenName))
	}
	{
		const prefix string = ",\"tokenAvatar\":"
		out.RawString(prefix)
		out.String(string(in.TokenAvatar))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int32(int32(in.Version))
	}
	{
		const prefix string = ",\"economicalModel\":"
		out.RawString(prefix)
		out.Int16(int16(in.EconomicalModel))
	}
	if in.Website != "" {
		const prefix string = ",\"website\":"
		out.RawString(prefix)
		out.String(string(in.Website))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultMetaData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultMetaData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultMetaData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultMetaData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita6(l, v)
}
func easyjson69c461c7DecodeCita7(in *jlexer.Lexer, out *ResultLogs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "topic":
			if in.IsNull() {
				in.Skip()
				out.Topic = nil
			} else {
				in.Delim('[')
				if out.Topic == nil {
					if !in.IsDelim(']') {
						out.Topic = make([]string, 0, 4)
					} else {
						out.Topic = []string{}
					}
				} else {
					out.Topic = (out.Topic)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Topic = append(out.Topic, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			out.Data = string(in.String())
		case "blockHash":
			out.BlockHash = string(in.String())
		case "blockNumber":
			out.BlockNumber = string(in.String())
		case "transactionIndex":
			out.TransactionIndex = string(in.String())
		case "transactionHash":
			out.TransactionHash = string(in.String())
		case "logIndex":
			out.LogIndex = string(in.String())
		case "transactionLogIndex":
			out.TransactionLogIndex = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita7(out *jwriter.Writer, in ResultLogs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix)
		if in.Topic == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Topic {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix)
		out.String(string(in.BlockHash))
	}
	{
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		out.String(string(in.BlockNumber))
	}
	{
		const prefix string = ",\"transactionIndex\":"
		out.RawString(prefix)
		out.String(string(in.TransactionIndex))
	}
	{
		const prefix string = ",\"transactionHash\":"
		out.RawString(prefix)
		out.String(string(in.TransactionHash))
	}
	{
		const prefix string = ",\"logIndex\":"
		out.RawString(prefix)
		out.String(string(in.LogIndex))
	}
	{
		const prefix string = ",\"transactionLogIndex\":"
		out.RawString(prefix)
		out.String(string(in.TransactionLogIndex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultLogs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultLogs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultLogs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultLogs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita7(l, v)
}
func easyjson69c461c7DecodeCita8(in *jlexer.Lexer, out *ResultBlock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "hearder":
			(out.Header).UnmarshalEasyJSON(in)
		case "header":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita8(out *jwriter.Writer, in ResultBlock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"hearder\":"
		out.RawString(prefix)
		(in.Header).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix)
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultBlock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultBlock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultBlock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultBlock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita8(l, v)
}
func easyjson69c461c7DecodeCita9(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "jsonrpc":
			out.Jsonrpc = string(in.String())
		case "result":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Result).UnmarshalJSON(data))
			}
		case "error":
			(out.Error).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita9(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix)
		out.String(string(in.Jsonrpc))
	}
	if len(in.Result) != 0 {
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		out.Raw((in.Result).MarshalJSON())
	}
	if true {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		(in.Error).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita9(l, v)
}
func easyjson69c461c7DecodeCita10(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.Jsonrpc = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "params":
			if in.IsNull() {
				in.Skip()
				out.Params = nil
			} else {
				in.Delim('[')
				if out.Params == nil {
					if !in.IsDelim(']') {
						out.Params = make([]interface{}, 0, 4)
					} else {
						out.Params = []interface{}{}
					}
				} else {
					out.Params = (out.Params)[:0]
				}
				for !in.IsDelim(']') {
					var v12 interface{}
					if m, ok := v12.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v12.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v12 = in.Interface()
					}
					out.Params = append(out.Params, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.Id = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita10(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix[1:])
		out.String(string(in.Jsonrpc))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		if in.Params == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Params {
				if v13 > 0 {
					out.RawByte(',')
				}
				if m, ok := v14.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v14.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v14))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int32(int32(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita10(l, v)
}
func easyjson69c461c7DecodeCita11(in *jlexer.Lexer, out *Proof) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "proposal":
			out.Proposal = string(in.String())
		case "height":
			out.Height = int32(in.Int32())
		case "round":
			out.Round = int32(in.Int32())
		case "commit":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Commits = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 string
					v15 = string(in.String())
					(out.Commits)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita11(out *jwriter.Writer, in Proof) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"proposal\":"
		out.RawString(prefix[1:])
		out.String(string(in.Proposal))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int32(int32(in.Height))
	}
	{
		const prefix string = ",\"round\":"
		out.RawString(prefix)
		out.Int32(int32(in.Round))
	}
	{
		const prefix string = ",\"commit\":"
		out.RawString(prefix)
		if in.Commits == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Commits {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				out.String(string(v16Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Proof) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Proof) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Proof) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Proof) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita11(l, v)
}
func easyjson69c461c7DecodeCita12(in *jlexer.Lexer, out *Header) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = time.Duration(in.Int64())
		case "preHash":
			out.PreHash = string(in.String())
		case "stateRoot":
			out.StateRoot = string(in.String())
		case "transactionsRoot":
			out.TransactionsRoot = string(in.String())
		case "receiptsRoot":
			out.ReceiptsRoot = string(in.String())
		case "quotaUsed":
			out.QuotaUsed = string(in.String())
		case "propose":
			out.Proposer = string(in.String())
		case "proof":
			(out.Proof).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita12(out *jwriter.Writer, in Header) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"preHash\":"
		out.RawString(prefix)
		out.String(string(in.PreHash))
	}
	{
		const prefix string = ",\"stateRoot\":"
		out.RawString(prefix)
		out.String(string(in.StateRoot))
	}
	{
		const prefix string = ",\"transactionsRoot\":"
		out.RawString(prefix)
		out.String(string(in.TransactionsRoot))
	}
	{
		const prefix string = ",\"receiptsRoot\":"
		out.RawString(prefix)
		out.String(string(in.ReceiptsRoot))
	}
	{
		const prefix string = ",\"quotaUsed\":"
		out.RawString(prefix)
		out.String(string(in.QuotaUsed))
	}
	{
		const prefix string = ",\"propose\":"
		out.RawString(prefix)
		out.String(string(in.Proposer))
	}
	{
		const prefix string = ",\"proof\":"
		out.RawString(prefix)
		(in.Proof).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Header) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Header) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Header) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Header) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita12(l, v)
}
func easyjson69c461c7DecodeCita13(in *jlexer.Lexer, out *Filter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fromBlock":
			out.FromBlock = string(in.String())
		case "toBlock":
			out.ToBlock = string(in.String())
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				in.Delim('[')
				if out.Address == nil {
					if !in.IsDelim(']') {
						out.Address = make([]string, 0, 4)
					} else {
						out.Address = []string{}
					}
				} else {
					out.Address = (out.Address)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.Address = append(out.Address, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]string, 0, 4)
					} else {
						out.Topics = []string{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.Topics = append(out.Topics, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita13(out *jwriter.Writer, in Filter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FromBlock != "" {
		const prefix string = ",\"fromBlock\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FromBlock))
	}
	if in.ToBlock != "" {
		const prefix string = ",\"toBlock\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ToBlock))
	}
	if len(in.Address) != 0 {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.Address {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if len(in.Topics) != 0 {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.Topics {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Filter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Filter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Filter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Filter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita13(l, v)
}
func easyjson69c461c7DecodeCita14(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int32(in.Int32())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita14(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita14(l, v)
}
func easyjson69c461c7DecodeCita15(in *jlexer.Lexer, out *CallRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = string(in.String())
		case "to":
			out.To = string(in.String())
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita15(out *jwriter.Writer, in CallRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix[1:])
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CallRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CallRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CallRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CallRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita15(l, v)
}
func easyjson69c461c7DecodeCita16(in *jlexer.Lexer, out *Body) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]Transactions, 0, 2)
					} else {
						out.Transactions = []Transactions{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v23 Transactions
					(v23).UnmarshalEasyJSON(in)
					out.Transactions = append(out.Transactions, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69c461c7EncodeCita16(out *jwriter.Writer, in Body) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transactions\":"
		out.RawString(prefix[1:])
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Transactions {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Body) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69c461c7EncodeCita16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Body) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69c461c7EncodeCita16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Body) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69c461c7DecodeCita16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Body) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69c461c7DecodeCita16(l, v)
}
